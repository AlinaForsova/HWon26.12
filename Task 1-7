#include <iostream>
#include <algorithm>

/*Task2*/
double* CreateArray(int size)
{
    double* array = new double[size];
    return array;
}

void FullArray(double* array, int size) {
    for (int i = 0; i < size; i++) 
    {
        std::cout << " For task2 enter " << i + 1 << " element: ";
        std::cin >> array[i];
    }
}
void PrintArray(double* array, int size) {
    std::cout << "Array: ";

    for (int j = 0; j < size; j++) 
    {
        std::cout << array[j] << " ";
    }
}

void ClearArray(double* array) 
{
    delete[] array;
}

/*Task3*/
void changeArray(int* array1, int lenght)
{
    int count = 0; /*Создаётся пустая переменная*/
    for (int i = 0; i < lenght; i += 2) /*Проходимся по каждому элементу массива*/
    {
        if (i + 1 < lenght)
        {
            count = array1[i]; /*Кладем в новую переменную значение i*/
            array1[i] = array1[i + 1]; /*Меняем переменные местами*/
            array1[i + 1] = count; /*Меняем переменные местами*/
        }
    }
}

/*Task4*/
void fillArray(int** arr, int line, int col) 
 { 
    for (int i = 0; i < line; i++) // случайное число от 10 до 50
    {
        for (int j = 0; j < col; j++) 
        {
            arr[i][j] = rand() % 41 + 10; //в кажду ячейку массива скалдываем случайное число
        }
    }
}

void printArray(int** arr, int line, int col) //функция вывода массива
{ 
    for (int i = 0; i < line; i++) 
    {
        for (int j = 0; j < col; j++) 
        {
            std::cout << arr[i][j] << " ";
        }
        std::cout << std::endl;
    }
}

void printArray(int** arr, int line, int col) { //функция вывода массива
    for (int i = 0; i < line; i++) {
        for (int j = 0; j < col; j++) {
            std::cout << arr[i][j] << " ";
        }
        std::cout << std::endl;
    }
}

/*Task5*/
int printSum(int first, int second) //функция суммы
{
    return first + second;
}

int printDiff(int first, int second) //функция минуса
{
    return first - second;
}

int printMult(int first, int second) //функция умножения
{
    return first * second;
}

int printDiv(int first, int second) //функция деления
{
    if (second == 0)
    {
        std::cout << "Error, second Number = 0" << std::endl;
        return 0;
    }
    else 
    {
        return first / second;
    }
}


/*Task6*/
int minDif(int nums[], int size6, int k) /*Функия принимает массив nums, его размер и число k*/
{
    if (k >= size6) /*Если размер массива меньше чем k, то выдается ошибка*/
    {
        std::cout << "\n" << "Size of the array is less than k!";
    }
    std::sort(nums, nums + size6); /*Сортируем массив*/
    int min = 100000000;/*Создаем переменную для хранения минимальной разницы*/
    for (int i = 0; i < size6 - k; i++)
    {
        min = std::min(min, nums[i + k - 1] - nums[k]); /*Разница между k самыми большими
        и самыми маленькими элементами*/
    }
    return min;
}

/*Task7*/
int HapNum(int array3[], int size7)
{
    int amount[101] = { 0 }; /*Создаем массив для подсчета частоты каждого числа (макс число 100)*/
    for (int i = 0; i < size7; i++)
    {
        amount[array3[i]]++; /*Увеличиваем счетчик каждого числа в массиве*/
    }
    int luck = -1; /*Счастливое число*/
    for (int i = 0; i <= 100; i++)
    {
        if (amount[i] = i) /*если частота равна числу, то это число счастливое*/
        {
            luck = std::max(luck, i); /*Находим наибольшее счастливое число*/
        }
    }
    return luck;
}
int main()
{

    {/* Task1*/
    /*1.1 - константный указатель на константу типа float*/
        const float value1 = 0.1f;
        const float* const ptr1 = &value1;
        /*1.2 -  Объявить тип указателя на long int*/
        long int* ptr2;
        /*1.3 - Объявить указатель на double*/
        double value3 = 0.3;
        double* ptr3 = &value3;
        /*1.4 - Объявить указатель на константу типа short int*/
        const short int value4 = 4;
        const short int* ptr4 = &value4;
        /*1.5 - Объявить тип константного указателя на константу типа float*/
        const float value5 = 0.5f;
        const float* const ptr5 = &value5;
        /*1.6 - Объявить тип указателя на константу типа char*/
        const char* ptr6;
        /*1.7 - Объявить константный указатель на double*/
        double value7 = 0.7;
        double* const ptr = &value7;
        /*1.8 - Объявить тип константного указателя на unsigned int*/
        unsigned int value8 = 8;
        unsigned int* const ptr8 = &value8;
    }


    {/*Task2
    Объявите указатель на массив типа double и предложите пользователю выбрать его размер.
    Далее напишите четыре функции:
    первая должна выделить память для массива,
    вторая – заполнить ячейки данными,
    третья – показать данные на экран,
    четвертая – освободить занимаемую память.
    Программа должна предлагать пользователю продолжать работу
    (создавать новые динамические массивы ) или выйти из программы.*/

        int size = 0;
        char choice{ 0 };

        do
        {
            std::cout << "For task2 enter size of array: ";
            std::cin >> size;

            double* array = CreateArray(size);
            FullArray(array, size);
            PrintArray(array, size);
            ClearArray(array);

            std::cout << "\nGo on? (Y/N) \n";
            std::cin >> choice;

        } while (choice == 'Y');
    }

    {
        /*Task3*/
        int* array1 = new int[12]; /*Создаем массив из 12 элементов*/
        for (int i = 0; i < 12; i++) /*Задаем массив*/
        {
            array1[i] = i + 1;
        }
        std::cout << "For task3 Array: "; /*Выводим первоначальный массив*/
        for (int i = 0; i < 12; i++)
        {
            std::cout << array1[i] << " ";
        }
        changeArray(array1, 12); /*Вызываем функцию замены элементов*/
        std::cout << "\n" << "For Task3 NewArray: "; /*Выводим новый массив*/
        for (int i = 0; i < 12; i++)
        {
            std::cout << array1[i] << " ";
        }
        delete[] array1; /*Освобождаем пямять*/
    }

    {/*Task4*/
        int lines = 0; //создаём и инициализируем переменную под строки
        int columns = 0; //создаём и инициализируем переменную под столбцы
        std::cout <<"\n" << "For task4 enter lines: ";
        std::cin >> lines; //считываем строки
        std::cout << "\n " << "For task4 enter colimns: ";
        std::cin >> columns; //считываем столбцы

        int** array2 = new int* [lines]; /*создаём двумерный динамический массив*/
        for (int i = 0; i < lines; i++) 
        {
            array2[i] = new int[columns];
        }

        srand(time(0)); //инициализация генератора случайных чисел

        fillArray(array2, lines, columns); //функция генерации случ чисел(наполняяем массив)
        std::cout << "Array: " << std::endl;
        printArray(array2, lines, columns); //функция вывода массив(печатаем массив)

        //освобождение памяти
        for (int i = 0; i < lines; i++) {
            delete[] array2[i];
        }
        delete[] array2;
    }

    {
        /*Task5*/
        int firstNumber = 0; //создаём и инциализируем параметр 1
        int secondNumber = 0; //создаём и инциализируем параметр 2
        std::cout << "Enter x: " << std::endl;
        std::cin >> firstNumber; //считываем параметр 1
        std::cout << "Enter y: " << std::endl;
        std::cin >> secondNumber; //считываем параметр 2
        typedef int (*ArithmeticFunction)(int, int); //создаём "псеводним" указателя на функцию
        ArithmeticFunction func; //объявляем переменную func с типом rithmeticFunction, чтобы присваивать адреса функций 
        char action = '+'; //создаём и инициализируем некоторый символ операции
        std::cout << "Enter action: " << std::endl;
        while (std::cin >> action && action != ' ') //по условию пока user не введёт пробел программа работает
        {
            switch (action)
            {
            case '+': //для операции сложения
                func = &printSum;
                break;
            case '-': //для операции вычитания
                func = &printDiff;
                break;
            case '*': //для операции умножения
                func = &printMult;
                break;
            case '/': //для операции деления
                func = &printDiv;
                break;
            default: //в случае неверно введённого символа
                std::cout << "Error" << std::endl;
                continue;
            }
            std::cout << func(firstNumber, secondNumber) << std::endl; //выводим значения указателя
            std::cout << "Enter action: "; //продолжаем вводить действия
        }
        std::cout << "End of programm" << std::endl;
    
    }
    
    
    {
        /*Task6*/
        int size6 = 0;
        std::cout << "\n" << "For task6 enter number of students: "; /*Вводим размер массива*/
        std::cin >> size6;
        int* nums = new int[size6]; /*Создаем массив размера size6*/
        std::cout << "\n" << "For task6 enter scors of the students: ";
        for (int i = 0; i < size6; i++) /*Заполняем массив вручную оценками учеников*/
        {
            std::cin >> nums[i];
        }
        int k = 0;
        std::cout << "\n" << "For task6 enter k: "; /*Вводим k*/
        std::cin >> k;
        std::cout << "\n" << "For task6 minimum possible difference: " << minDif(nums, size6, k);
        delete[] nums;

    }

    {
        /*Task7*/
        int size7=0;
        std::cout << "\n"<< "For task7 enter the size of the array: ";
        std::cin >> size7;

        int* array3 = new int[size7]; // Создаем массив чисел размером size

        std::cout <<"\n" << "For task7 enter the elements of the array: ";
        for (int i = 0; i < size7; i++) {
            std::cin >> array3[i]; // Вводим элементы массива
        }

        int fin = HapNum(array3, size7); // Вызываем функцию для нахождения наибольшего "lucky" числа
        if (fin != -1) {
            std::cout <<"\n" <<"The largest lucky integer in the array is: " << fin;
        }
        else {
            std::cout <<"\n" << "There is no lucky integer in the array.";
        }

        delete[] array3; // Освобождаем память
        return 0;
    }
}
